using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.UI;


public class FlyMovemnt : MonoBehaviour
{
    public static FlyMovemnt Instance;
    public float Range;
    private NavMeshAgent agent;

    public float radius;
    public GameObject Preditor;
    public GameObject PreditorTwo;

    public float RunFromPrayDist;

    public float speed = 10;
    public GameObject sheep;
    public float spawnRadius;
    public float spawnCollisionCheckRadius;
    public LayerMask GroundLayer;
    public float raycastDistance = 5f;






    public Rigidbody rb;
    void Awake()
    {

    }
    void Start()
    {
        Instance = this;


    }


    bool RandomPoint(Vector3 center, float range, out Vector3 result)
    {
        for (int i = 0; i < 30; i++)
        {
            Vector3 randomPoint = center + Random.insideUnitSphere * range;
            NavMeshHit hit;
            if (NavMesh.SamplePosition(randomPoint, out hit, 1.0f, NavMesh.AllAreas))
            {
                result = hit.position;
                return true;
            }
        }
        result = Vector3.zero;
        return false;
    }

    public Vector3 GetRandomPoint(Transform point = null, float radius = 0)
    {
        Vector3 _point;
        if (RandomPoint(point == null ? transform.position : point.position, radius == 0 ? Range : radius, out _point))
        {
            Debug.DrawRay(_point, Vector3.up, Color.black, 1);
            return _point;
        }

        return point == null ? Vector3.zero : point.position;
    }

    void Update()
    {



        if (!agent.hasPath)
        {
            agent.SetDestination(FlyMovemnt.Instance.GetRandomPoint());
        }

     




    }

        void OnTriggerEnter(Collider other)
        {



        

            if (other.tag == "Grass")

            {
                StartCoroutine(ExampleCoroutine());


                IEnumerator ExampleCoroutine()

                {
                   // rb.constraints = RigidbodyConstraints.FreezeAll;
                    yield return new WaitForSeconds(5);
                    //rb.constraints = RigidbodyConstraints.None;

                




                Debug.Log("BOOP");



                int sheepCount = Random.Range(1, 1);


                for (int i = 0; i < sheepCount; i++)

                {



                    int xXGroundThreePos = Random.Range(0, 50);
                    int zZGroundThreePos = Random.Range(0, 50);

                    Vector3 pos = new Vector3(xXGroundThreePos, 0, zZGroundThreePos) + transform.position * spawnRadius;
                    Vector3 groundPos = new Vector3(xXGroundThreePos, 0, zZGroundThreePos);

                    RaycastHit hit;

                    Physics.Raycast(pos, Vector3.down, out hit, raycastDistance);

                    if (!Physics.CheckSphere(groundPos, spawnCollisionCheckRadius, GroundLayer))
                    {
                        GameObject inssheep = Instantiate(sheep, groundPos, Quaternion.Euler(new Vector3(0, Random.Range(0, 360), 0)));
                    }

                }



            }




        }



        }
    }

